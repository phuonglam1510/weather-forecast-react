image: node:10.13.0 # change to match your node version

cache:
  paths:
    - node_modules/

stages:
  - test
  - build
  - deploy

test:
  stage: test
  script:
    - yarn
    - yarn lint

build:
  stage: build
  environment:
    name: production
  script:
    - yarn
    - yarn lint
    - yarn build
  artifacts:
    paths:
      - build
  only:
    - master # run on master branch
    # - develop

publish:
  stage: deploy
  environment:
    name: production
  dependencies:
    - build
  script:
    - apt-get update -qq && apt-get install -y -qq sshpass
    - apt-get install -y -qq rsync
    ##
    ## Install ssh-agent if not already installed, it is required by Docker.
    ## (change apt-get to yum if you use an RPM-based image)
    ##
    - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'

    ##
    ## Run ssh-agent (inside the build environment)
    ##
    - eval $(ssh-agent -s)

    ##
    ## Add the SSH key stored in SSH_PRIVATE_KEY variable to the agent store
    ## We're using tr to fix line endings which makes ed25519 keys work
    ## without extra base64 encoding.
    ## https://gitlab.com/gitlab-examples/ssh-private-key/issues/1#note_48526556
    ##
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null

    ##
    ## Create the SSH directory and give it the right permissions
    ##
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    # rm -rf public
    # mv dist public
    - cd build
    - export SSHPASS=$SSH_PRIVATE_KEY
    - sshpass -e rsync -e "ssh -o StrictHostKeyChecking=no" -avz --exclude='.git' --exclude='.gitlab-ci.yml' --progress ./* $APP_DEPLOY_URL:/home/ubuntu/build/
    - sshpass -e ssh ${APP_DEPLOY_URL} 'sudo rsync -arvc /home/ubuntu/build/  /var/www/portal/build'
    - sshpass -e ssh ${APP_DEPLOY_URL} 'sudo pm2 restart portal'

  artifacts:
    paths:
      - build # GitLab pages serve from a 'public' directory
  only:
    - master # run on master branch
    # - develop




